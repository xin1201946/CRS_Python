name: Build and Release CCRS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 获取最新 Tag 版本号
        id: get_tag
        run: |
          $TAG = git describe --tags --abbrev=0
          echo "LATEST_TAG=$TAG" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "最新 Tag: $TAG"
          if (-not ($TAG -match '^v\d+\.\d+\.\d+$')) {
            Write-Error "Tag 格式错误，必须为 vX.Y.Z，例如 v1.0.0"
            exit 1
          }

      - name: 设置 Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 安装 PyInstaller 及其他依赖
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller

      - name: 安装 CCRS_Library 依赖
        run: python -m pip install ./CCRS_Library-2.0.5.14-py3-none-any.whl

      - name: 安装项目依赖
        run: python -m pip install -r requirements.txt

      - name: 创建 version_info.txt
        shell: pwsh
        run: |
          $tag = $env:LATEST_TAG.TrimStart("v")
          $parts = $tag.Split(".")
          if ($parts.Count -ne 3) {
            Write-Error "版本号格式不正确，期望 vX.Y.Z 格式"
            exit 1
          }
          $version_tuple = "($($parts[0]), $($parts[1]), $($parts[2]), 0)"
          $content = @"
          VSVersionInfo(
            ffi=0x0,
            filevers=$version_tuple,
            prodvers=$version_tuple,
            mask=0x3f,
            flags=0x0,
            OS=0x40004,
            fileType=0x1,
            subtype=0x0,
            date=(0, 0)
          )
          StringFileInfo(
            StringTable('040904B0',
              CompanyName='Your Company',
              FileDescription='Casting Char Recognition System',
              FileVersion='$($env:LATEST_TAG)',
              InternalName='CCRS',
              LegalCopyright='Copyright (C) 2025 Your Company',
              OriginalFilename='CCRS.exe',
              ProductName='CCRS',
              ProductVersion='$($env:LATEST_TAG)')
          )
          VarFileInfo(
            Translation(0x0409, 1200)
          )
          "@
          $content | Out-File version_info.txt -Encoding utf8
          Get-Content version_info.txt  # 调试输出

      - name: 编译项目
        run: |
          echo "开始构建程序..."
          pyinstaller --onedir --name CCRS `
            --icon=CCRS.ico `
            --hidden-import=ultralytics `
            --hidden-import=CCRS_Library `
            --hidden-import=tensorflow `
            --version-file=version_info.txt `
            --log-level DEBUG `
            main.py

      - name: 检查版本信息
        shell: pwsh
        run: |
          $exePath = "dist\CCRS\CCRS.exe"
          if (Test-Path $exePath) {
            $versionInfo = [System.Diagnostics.FileVersionInfo]::GetVersionInfo($exePath)
            echo "文件版本: $($versionInfo.FileVersion)"
            echo "产品版本: $($versionInfo.ProductVersion)"
          } else {
            Write-Error "未找到 CCRS.exe"
            exit 1
          }

      - name: 打包构建产物
        run: Compress-Archive -Path "dist\CCRS\*" -DestinationPath "CCRS_Build.zip"

      - name: 上传构建产物（Artifact）
        uses: actions/upload-artifact@v4
        with:
          name: CCRS_Build
          path: CCRS_Build.zip
          retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: CCRS_Build
          path: CCRS_Build

      - name: 发布 Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.LATEST_TAG }}
          name: CCRS Release ${{ env.LATEST_TAG }}
          body: |
            🚀 **新版本发布**
            - 自动编译 & 打包
            - PyInstaller 生成的可执行文件
            - 依赖库已打包，无需单独安装
            基于 CCRS 内核 2.0.5.14 编译
            **⚠ 注意:** 运行时仍需 `torch` 和 `tensorflow` 的兼容 DLL
          draft: false
          prerelease: false
          files: CCRS_Build/CCRS_Build.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}