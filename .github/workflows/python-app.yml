name: Build and Release CCRS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 获取最新 Tag 版本号
        id: get_tag
        run: |
          $TAG = git describe --tags --abbrev=0
          echo "LATEST_TAG=$TAG" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "最新 Tag: $TAG"
          if (-not ($TAG -match '^v\d+\.\d+\.\d+$')) {
            Write-Error "Tag 格式错误，必须为 vX.Y.Z，例如 v1.0.0"
            exit 1
          }

      - name: 设置 Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 安装 PyInstaller 及其他依赖
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller

      - name: 安装 CCRS_Library 依赖
        run: python -m pip install ./CCRS_Library-2.0.5.14-py3-none-any.whl

      - name: 安装项目依赖
        run: python -m pip install -r requirements.txt

      - name: 生成 CCRS.spec 文件
        shell: pwsh
        run: |
          $tag = $env:LATEST_TAG.TrimStart("v")
          $parts = $tag.Split(".")
          if ($parts.Count -ne 3) {
              Write-Error "版本号格式不正确，期望 vX.Y.Z 格式"
              exit 1
          }
          $version_tuple = "($($parts[0]), $($parts[1]), $($parts[2]), 0)"
          $version_str = "v$tag"
          
          $spec_content = @"
          from PyInstaller.utils.win32.versioninfo import VSVersionInfo, StringFileInfo, StringTable, StringStruct, VarFileInfo, VarStruct
          
          version_info = VSVersionInfo(
              ffi=0x0,
              kids=[
                  StringFileInfo(
                      [
                          StringTable(
                              '040904B0',
                              [
                                  StringStruct('CompanyName', '林间追风'),
                                  StringStruct('FileDescription', 'Casting Char Recognition System'),
                                  StringStruct('FileVersion', '$version_str'),
                                  StringStruct('InternalName', 'CCRS'),
                                  StringStruct('LegalCopyright', 'Copyright (C) 2025 林间追风'),
                                  StringStruct('OriginalFilename', 'CCRS.exe'),
                                  StringStruct('ProductName', 'CCRS'),
                                  StringStruct('ProductVersion', '$version_str')
                              ]
                          )
                      ]
                  ),
                  VarFileInfo([VarStruct('Translation', [0x0409, 1200])])
              ],
              mask=0x3f,
              flags=0x0,
              OS=0x40004,
              fileType=0x1,
              subtype=0x0,
              date=(0, 0),
              version=$version_tuple
          )
          
          a = Analysis(
              ['main.py'],
              pathex=[],
              binaries=[],
              datas=[],
              hiddenimports=[],
              hookspath=[],
              runtime_hooks=[],
              excludes=[],
              win_no_prefer_redirects=False,
              win_private_assemblies=False,
              cipher=None
          )
          
          pyz = PYZ(a.pure, a.zipped_data, cipher=None)
          
          exe = EXE(
              pyz,
              a.scripts,
              a.binaries,
              a.zipfiles,
              a.datas,
              [],
              name='CCRS',
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=True,
              upx_exclude=[],
              runtime_tmpdir=None,
              console=True,
              version=version_info
          )
          "@
          
          $spec_content | Out-File -FilePath "CCRS.spec" -Encoding utf8
          Get-Content "CCRS.spec"  # 检查生成的内容

      - name: 使用 PyInstaller 编译项目
        run: |
            echo "开始构建程序..."
            pyinstaller CCRS.spec

      - name: 打包构建产物
        run: Compress-Archive -Path "dist\CCRS\*" -DestinationPath "CCRS_Build.zip"

      - name: 上传构建产物（Artifact）
        uses: actions/upload-artifact@v4
        with:
          name: CCRS_Build
          path: CCRS_Build.zip
          retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: CCRS_Build
          path: CCRS_Build

      - name: 发布 Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.LATEST_TAG }}
          name: CCRS Release ${{ env.LATEST_TAG }}
          body: |
            🚀 **新版本发布**
            - 自动编译 & 打包
            - PyInstaller 生成的可执行文件
            - 依赖库已打包，无需单独安装
            基于 CCRS 内核 2.0.5.14 编译
            **⚠ 注意:** 运行时仍需 `torch` 和 `tensorflow` 的兼容 DLL
          draft: false
          prerelease: false
          files: CCRS_Build/CCRS_Build.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}