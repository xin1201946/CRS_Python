name: Build and Release CCRS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      

      - name: 获取最新 Tag 版本号
        id: get_tag
        run: |
          $TAG = git describe --tags --abbrev=0
          echo "LATEST_TAG=$TAG" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "最新 Tag: $TAG"
          if (-not ($TAG -match '^v\d+\.\d+\.\d+$')) {
            Write-Error "Tag 格式错误，必须为 vX.Y.Z，例如 v1.0.0"
            exit 1
          }

      - name: 设置 Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 安装 PyInstaller 及其他依赖
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller

      - name: 安装 CCRS_Library 依赖
        run: python -m pip install ./CCRS_Library-2.0.6.1-py3-none-any.whl

      - name: 安装项目依赖
        run: python -m pip install -r requirements.txt

      - name: 使用 PyInstaller 编译项目
        run: |
            echo "开始构建程序..."
            pyinstaller --name=CCRS --console --icon=CCRS.ico main.py

      - name: 复制 Python 的 site-packages 到 dist\CCRS
        run: |
            $pythonPath = python -c "import sys; print(sys.executable)"
            $sitePackagesPath = Split-Path -Path $pythonPath -Parent | Join-Path -ChildPath "Lib\site-packages"
            Copy-Item -Path $sitePackagesPath -Destination "dist\CCRS" -Recurse -Force

      - name: 复制 getNum.py 到根目录
        run: Copy-Item -Path "./getNum.py" -Destination "dist\CCRS\"

      - name: 复制 flask-dist 文件夹到 dist\CCRS
        run: Copy-Item -Path "./flask-dist" -Destination "dist\CCRS\" -Recurse -Force

      - name: 打包构建产物
        run: Compress-Archive -Path "dist\CCRS\*" -DestinationPath "CCRS_Build.zip"

      - name: 上传构建产物（Artifact）
        uses: actions/upload-artifact@v4
        with:
          name: CCRS_Build
          path: CCRS_Build.zip
          retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 确保 GITHUB_TOKEN 有写入 Release 的权限

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 获取最新 Tag 版本号
        id: get_tag
        run: echo "LATEST_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      - name: 获取上一个 Tag 版本号
        id: get_prev_tag
        run: echo "PREV_TAG=$(git describe --tags --abbrev=0 --match 'v*' $(git rev-list --tags --skip=1 --max-count=1))" >> $GITHUB_ENV

      - name: 生成更新日志
        id: changelog
        run: |
          echo "### 更新日志" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --pretty=format:"- %s (%an)" ${{ env.PREV_TAG }}..${{ env.LATEST_TAG }} >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          cat CHANGELOG.md

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: CCRS_Build
          path: CCRS_Build

      - name: 选择合适的 Token
        run: |
          if [[ -n "${{ secrets.GH_PAT }}" ]]; then
            echo "使用 GH_PAT 进行 Release"
            echo "RELEASE_TOKEN=${{ secrets.GH_PAT }}" >> $GITHUB_ENV
          else
            echo "使用 GITHUB_TOKEN 进行 Release"
            echo "RELEASE_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          fi

      - name: 发布 Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.LATEST_TAG }}
          name: CCRS Release ${{ env.LATEST_TAG }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          files: CCRS_Build/CCRS_Build.zip
        env:
          GITHUB_TOKEN: ${{ env.RELEASE_TOKEN }}
