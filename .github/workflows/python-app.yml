name: Build and Release CCRS

on:
  push:
    branches:
      - main  # 监听 main 分支的 push
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史，以便获取 Tag

      - name: 获取最新 Tag 版本号
        id: get_tag
        run: |
          $TAG = git describe --tags --abbrev=0
          echo "LATEST_TAG=$TAG" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "最新 Tag 版本: $TAG"

      - name: 设置 Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 安装 PyInstaller 及其他依赖
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller

      - name: 安装 CCRS_Library 依赖
        run: python -m pip install ./CCRS_Library-2.0.5.14-py3-none-any.whl

      - name: 安装项目依赖
        run: |
          python -m pip install -r requirements.txt

      - name: 创建 version_info.txt
        shell: pwsh
        run: |
          # 从环境变量中获取最新 Tag，例如 "v1.0.0"
          $tag = $env:LATEST_TAG.TrimStart("v")
          # 分割版本号
          $parts = $tag.Split(".")
          if ($parts.Count -eq 3) {
            # 构造一个元组：最后一位补0
            $tuple = "($($parts[0]), $($parts[1]), $($parts[2]), 0)"
          } else {
            Write-Error "版本号格式不正确，期望 vX.Y.Z 格式"
            exit 1
          }
          @"
          VSVersionInfo(
          ffi=0x0400,
          filevers=$tuple,
          prodvers=$tuple,
          struc_version=(0, 0, 0, 0),
          filetype=0x1,
          subtype=0x0,
          flags=0x0,
          OS=0x4,
          filedate=(0, 0),
          company_name="林间追风",
          product_name="CCRS",
          product_version="$($env.LATEST_TAG)",
          file_description="Casting Char Recognition System",
          legal_copyright="Copyright (C) 2025 林间追风",
          original_filename="CCRS.exe",
          internal_name="CCRS"
          )
          "@ | Out-File version_info.txt -Encoding utf8
          
          

      - name: 编译项目
        run: |
          echo "开始构建程序..."
          pyinstaller --onedir --name CCRS `
            --icon=CCRS.ico `
            --hidden-import=ultralytics `
            --hidden-import=CCRS_Library `
            --hidden-import=tensorflow `
            --version-file=version_info.txt `
            main.py

      - name: 打包构建产物
        run: Compress-Archive -Path "dist\CCRS\*" -DestinationPath "CCRS_Build.zip"

      - name: 上传构建产物（Artifact）
        uses: actions/upload-artifact@v4
        with:
          name: CCRS_Build
          path: CCRS_Build.zip
          retention-days: 7

  release:
    needs: build  # 依赖 build 任务
    runs-on: ubuntu-latest

    steps:
      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: CCRS_Build
          path: CCRS_Build

      - name: 发布 Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.LATEST_TAG }}
          name: CCRS Release ${{ env.LATEST_TAG }}
          body: |
            🚀 **新版本发布**
            - 自动编译 & 打包
            - PyInstaller 生成的可执行文件
            - 依赖库已打包，无需单独安装
            基于 CCRS 内核 2.0.5.14 编译
            **⚠ 注意:** 运行时仍需 `torch` 和 `tensorflow` 的兼容 DLL
          draft: false
          prerelease: false
          files: CCRS_Build/CCRS_Build.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
